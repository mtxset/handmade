things unclear:
wchar_t/L"string" purpose
switch vs callbacks (virtuals)

latests controls:
F2 to start and end recording
F6 or alt+F4 quits the game
Enter will spawn player
WASD, arrows moves him
Space - jumps

day 123: thread synchronization and communication
 process - has a allocated memory
  thread has access to memory allocated to process
 
 problems:
 #1 how thread should execute code
 #2 sync/when-work-done

 special instructions
  locked exchange - ensures that at any given time only one thread will be able to modify memory
  interlocked compare exchange - does if (work) but with lock/unlock guarantee between threads
  while (true) {
   if (interlocked_compare_exchange()) {
    do_work();
   }
   sleep();
  }

 reads/writes:
  reads always work
  writes - can lead to multiple writes and then read becomes complicated

 cache lines: (on x64 should not be a problem, but if it's not avoid it cuz it's costly)
  var a, b; 
  0,1 - state of var
                   core #1  core #2
  load into cache  a0 b0    a0 b0
  work on vars     a0 b0    a0 b0
  save changes     a1 b0    a0 b1
  commit
  final result:    a = a1 or a0; b = b0 or b1;            

 single producer / single consumer
  each tile(s) is done by preassigned thread; so if someone gets to do a slow work and still has some work to do after it's done, we will be waiting for him, but we may gain something if have a lot of work (so we decrease cycles from queue/dequeue)
 single producer / multiple consumers threads will take any work thus if someone takes on long work, by the time he's done other will be done with rest of the work (good if we have ~100 work units)

day 122: multithreading
 cpu state: asm instructions, registry, memory, addresses
 process - state of memory layout, as in: it gets only a separate memory (addresses) state
 thread  - each process may want to have separate thread and thread has separate instruction set and registers too
 fiber   - manual version of thread, but they don't run in parallel
 
 core    - set of cpu units, it has instruction decoding, arithmetic logic units, memory, but it has logical processors too, which each of theam can hyperthread
 hyperthread - somethwat like thread, but 
 
 so my machine has 4 cores and 8 logical processors, so I can issue 8 hyperthreads and 4 threads
 so I split clipping to 4 threads, and then further split scan lines to 2 hyperthreads

 OS:
  interrupts - os can interrupt process, to run its code which can decide to switch process which was running on cpu
  preemption - means OS can interrupt process/thread without it giving permission
  cooperative - OS does not interrupt, thread calls it manually through yield();

 at some point Intel tried Pentium 6 with 8mgz clock and it melted, so they implemented:
  - wide execution (simd)    -\ 
															 ------ two main things
  - more execution (threads) -/

day 121: 
 preparing draw_rect_quak function for multithreading by clipping and splitting scan lines
 clipping will be left for OS threads (clip size ~32 bytes ~l1-l2 cache size)
 scanlines will be left for CPU threads (hyperthreading) and cache locality

day 120: IACA tool (detailed explanation on report by iaca on day 121) https://www.intel.com/content/www/us/en/developer/articles/tool/architecture-code-analyzer.html
put the code you wanna analyze
 1. get tool
 2. we assume you put under IACA_PATH (d:/tools/iaca has iaca.exe and iacaMarks.h), 
 3. in code include so you can turn on/off:
#if 1
#define <iacaMarks.h>
#else
#define IACA_VC64_START
#define IACA_VC64_END
#endif
 4. in build add:-IIACA_PATH (-Id:/tools/iaca/)
 5. win64: starting point: IACA_VC64_START end point: IACA_VC64_END (read readme on website if not clear)
 while (true) {
 IACA_VC64_START
 }
 IACA_VC64_END
6. compile code with 5. additions
7. run iaca tool (select arch closest to yours from:  https://en.wikipedia.org/wiki/List_of_Intel_CPU_microarchitectures)

 IACA_PATH -arch SKL -trace path_to_trace_output PATH_TO_YOUR_BINARY > path_to_report_output

 D:\tools\iaca\iaca.exe -arch SKL -trace other\output.txt C:\Users\MTX\source\repos\handmade\build\game.dll > other\report.txt
 
day 118: more optimizations
 with -02:       cycles total    |calls| cycles per call
  draw_rect_quak: 16237450   cy    53h   306366   cy/h 

  quak: 36 cycles per pixel
  slow: 194 cycles per pixel

day 117: simd packing
 
day 116: 
 with -02:       cycles total    |calls| cycles per call
  draw_rect_slow: 78927118   cy    50h   1578542  cy/h
  draw_rect_quak: 46461665   cy    50h   929233   cy/h
 with -0d         
  draw_rect_slow: 1947287758 cy    53h   36741278 cy/h
  draw_rect_quak: 304777255  cy    53h   5750514  cy/h

day 115: simd basics
 1. single instruction multiple data
 2. "normal" b = a + a; -> add b a,a or mov b, a; add b, a;
 3. simd 4-wide
  b0   a0   a0 // lane
  b1 = a1 + a1
  b2   a2   a2
  b3   a3   a3
  -- single operation --
  sse    - 4 wide
  avx    - 8 wide 
  avx512 - 16 wide

        "soa"          vs             "aos"
 structure of arrays            array of structures
 we need: 					struct color {f32 r,g,b,a}
 struct colors {
  f32 r[1000];
  f32 g[1000];
  f32 b[1000];
  f32 a[1000];
 }   

 because intel cpu has a wait to pack data to registers is much manner               

day 111: how to optimize:
 1. gather stats/info - where/how is it slow? (how much they are being run in code?)
 2. estimate how fast should it run
 3. analyze efficiency (algo) and perfromance (code/hardware optimizations)
  3.1 improve algo by removing pieces (removing unnecessary work)
 4. think, solve, code

day 112:
 simd - single instruction multiple data (typical 4 things, but as many 8 or 16 or even 64)
 intrusctions (L0)                       cache            memory
 add register0, register1, register2 	L1, L2, L3	   storing values
 each each is slower than the other (L0 being fastest, L3 being slowest)
 L1 - let's say 2 to read/write?
 L2 - let's say 16 to read/write?
 memory - 300 cycles to read/write?
 add - 2 cycles
 cycle - cpu work - so 3.2 ghz -> max 3.2 * 10^9 cycles per second
 Instruction Cache (our asm code) -> decoded to microcodes -> 1 cycle -> hardware? (???)
 bandwith - gb/s - speed at which we can get our memory (ram->cache->l1,l2,l3...)
 latency - how long it will take for our memory to get upon request
 cache miss - is when an operation before finishing has to grab some memory thus adding latency
 prefetch - guessing what data we need so cpu can start calculation and query memory at the same time
 hyperthreading - if cpu thread is waiting for a memory it switches to other thread
 latency bubbles - cpu waiting for memory 
 throughput (cpi - cycles per instruction) - how many cycles instruction will cost cpu (less is better)

day 109: 
 resolution independent rendering

day103:
 working on lightning
 3 - layers of reflection - sky, middle, ground (sky and ground kinda done)
 middle will probably have only lightning
 
day93:
 bilinear texture filtering:
 sub pixel drawing: taking samples from 4 closest pixels and blending between them

day90-91:
 coordination explanation
 basis translation: new_vector = new_origin + a_x * new_y_axis + a_y * new_y_axis
 to rotate by (a):
 basis: {
	v3 origin;
	v3 x_axis = cos(a),sin(a)
    v3 y_axis = cos(a+90),sin(a+90) = -sin(a),cos(a) = perpendicular(x_axis)
 }

day87:
- seamless ground textures

day84: 
- ground

day77:
- some sort of stairs/ramp

day66:
- added simualtion regions
- added sword projectile

day60:
- added hitpoints
- color is now v4